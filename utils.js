"use strict";
const fs = require('fs');
const content = 'Some content!';
const convertWordToNumber = (word) => {
    if (!word)
        return '';
    return word
        .replace(/[a-c]/g, '2')
        .replace(/[d-f]/g, '3')
        .replace(/[g-i]/g, '4')
        .replace(/[j-l]/g, '5')
        .replace(/[m-o]/g, '6')
        .replace(/[p-s]/g, '7')
        .replace(/[t-v]/g, '8')
        .replace(/[w-z]/g, '9');
};
const generateNumberWordsObject = () => {
    const words = require('an-array-of-english-words')
        .filter((item) => (3 <= item.length && item.length <= 7));
    const wordNumbers = {};
    words === null || words === void 0 ? void 0 : words.forEach((word) => {
        var _a;
        const number = convertWordToNumber(word);
        if (wordNumbers[number]) {
            (_a = wordNumbers[number]) === null || _a === void 0 ? void 0 : _a.push(word);
        }
        else {
            wordNumbers[number] = [word];
        }
    });
    fs.writeFile('./wordNumbers.txt', JSON.stringify(wordNumbers), (err) => {
        if (err) {
            console.error(err);
            return;
        }
    });
};
const generateVanityNumbers = (inputPhone) => {
    var _a, _b;
    const phone = inputPhone
        .trim()
        //.replace(/^\+[0-9]{1,3}(\s|\-)/, "") // exclude Country code
        .replace(/[-\s]/g, '');
    const decomposedPhoneArr = phone.split(/[0-1]/);
    const longestSequence = decomposedPhoneArr.reduce((a, b) => a.length > b.length ? a : b);
    const rawdata = fs.readFileSync('./resources/wordNumbers.txt');
    const dataMap = JSON.parse(rawdata);
    const vanityNumbers = [];
    const isVanityInArray = (vanityNumber) => vanityNumbers.includes(vanityNumber);
    for (let index = longestSequence.length; index >= 3; index--) {
        if (vanityNumbers.length >= 5)
            break;
        const fromEndKey = longestSequence.slice(-index);
        const fromStartKey = longestSequence.slice(0, index);
        let vanityNumber;
        (_a = dataMap[fromEndKey]) === null || _a === void 0 ? void 0 : _a.map((item) => {
            if (vanityNumbers.length < 5) {
                vanityNumber = phone.replace(fromEndKey, ` ${item} `).trim();
                !isVanityInArray(vanityNumber) && vanityNumbers.push(vanityNumber);
            }
        });
        (_b = dataMap[fromStartKey]) === null || _b === void 0 ? void 0 : _b.map((item) => {
            if (vanityNumbers.length < 5) {
                vanityNumber = phone.replace(fromStartKey, ` ${item} `).trim();
                !isVanityInArray(vanityNumber) && vanityNumbers.push(vanityNumber);
            }
        });
    }
    if ((vanityNumbers === null || vanityNumbers === void 0 ? void 0 : vanityNumbers.length) > 0) {
        return vanityNumbers.reduce((acc, item, index) => {
            acc[`VanityNumber${index + 1}`] = item;
            return acc;
        }, {});
    }
    return {
        VanityNumber1: 'No vanity numbers were found',
    };
};
generateNumberWordsObject();
// const testPhone = '+1 185 872 2665';
// const testPhone = '+11234567890';
// const testPhone = '+16617313960';
// console.log('%c =========== generateVanityNumbers() >>', 'color:#669851;font-size:12px', generateVanityNumbers(testPhone));
//# sourceMappingURL=data:application/json;base64,